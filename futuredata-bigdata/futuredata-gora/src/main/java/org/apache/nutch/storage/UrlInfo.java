/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.nutch.storage;  
@SuppressWarnings("all")
public class UrlInfo extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UrlInfo\",\"namespace\":\"org.apache.nutch.storage\",\"fields\":[{\"name\":\"seedUrl\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    SEED_URL(0, "seedUrl"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "seedUrl",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return UrlInfo._ALL_FIELDS.length;
  }

  private java.lang.CharSequence seedUrl;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return seedUrl;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: seedUrl = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'seedUrl' field.
   */
  public java.lang.CharSequence getSeedUrl() {
    return seedUrl;
  }

  /**
   * Sets the value of the 'seedUrl' field.
   * @param value the value to set.
   */
  public void setSeedUrl(java.lang.CharSequence value) {
    this.seedUrl = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'seedUrl' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeedUrlDirty() {
    return isDirty(0);
  }

  /** Creates a new UrlInfo RecordBuilder */
  public static org.apache.nutch.storage.UrlInfo.Builder newBuilder() {
    return new org.apache.nutch.storage.UrlInfo.Builder();
  }
  
  /** Creates a new UrlInfo RecordBuilder by copying an existing Builder */
  public static org.apache.nutch.storage.UrlInfo.Builder newBuilder(org.apache.nutch.storage.UrlInfo.Builder other) {
    return new org.apache.nutch.storage.UrlInfo.Builder(other);
  }
  
  /** Creates a new UrlInfo RecordBuilder by copying an existing UrlInfo instance */
  public static org.apache.nutch.storage.UrlInfo.Builder newBuilder(org.apache.nutch.storage.UrlInfo other) {
    return new org.apache.nutch.storage.UrlInfo.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for UrlInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UrlInfo>
    implements org.apache.avro.data.RecordBuilder<UrlInfo> {

    private java.lang.CharSequence seedUrl;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.nutch.storage.UrlInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.nutch.storage.UrlInfo.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing UrlInfo instance */
    private Builder(org.apache.nutch.storage.UrlInfo other) {
            super(org.apache.nutch.storage.UrlInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.seedUrl)) {
        this.seedUrl = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.seedUrl);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'seedUrl' field */
    public java.lang.CharSequence getSeedUrl() {
      return seedUrl;
    }
    
    /** Sets the value of the 'seedUrl' field */
    public org.apache.nutch.storage.UrlInfo.Builder setSeedUrl(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.seedUrl = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'seedUrl' field has been set */
    public boolean hasSeedUrl() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'seedUrl' field */
    public org.apache.nutch.storage.UrlInfo.Builder clearSeedUrl() {
      seedUrl = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    public UrlInfo build() {
      try {
        UrlInfo record = new UrlInfo();
        record.seedUrl = fieldSetFlags()[0] ? this.seedUrl : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public UrlInfo.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public UrlInfo newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends UrlInfo implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'seedUrl' field.
		   */
	  public java.lang.CharSequence getSeedUrl() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seedUrl' field.
		   * @param value the value to set.
	   */
	  public void setSeedUrl(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seedUrl' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeedUrlDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

